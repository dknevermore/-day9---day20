#生成器总结
#1.语法上和函数类似：生成器函数和常规函数几乎是一样的。它们都是使用def语句进行定义，差别在于
#生成器使用yield语句返回一个值，而常规函数使用return语句返回一个值

#2.自动实现迭代器协议：对于生成器，python会自动实现迭代器协议，以便应用到迭代背景中（如for循环，sum函数）。
#由于生成器自动实现了迭代器协议，所以，我们可以调用它的next方法，并且，在没有值可以返回的时候，生成器自动产生Stoplteration异常

#3.状态挂起：生成器使用yield语句返回一个值。yield语句挂起该生成器函数的状态，保留足够的信息，以便之后从它离开的地方继续执行

#优点一：生成器的好处是延迟计算，一次返回一个结果。也就是说，它不会一次产生所有的结果，这对于大数据量处理，将会非常有用

#优点二：生成器还能有效提高代码可读性


#这里，至少有两个充分的理由说明，使用生成器比不使用生成器代码更加清晰：
#1.使用生成器以后，代码行数更少。大家要记住，如果想把代码写的pythonic，在保证代码可读性的前提下，代码行数越少越好

#2.不使用生成器的时候，对于每次结果，我们首先看到的是result.append(index)，其次，才是index。也就是说。
#我们每次看到的是一个列表的append操作，只是append的是我们想要的结果。使用生成器的时候，直接yield index，
#少了列表append操作的干扰，我们一眼就能够看出，代码是要返回index

#这个例子充分说明了，合理使用生成器，能够有效提高代码可读性。只要大家完全接受了生成器的概念，理解了yield语句和return语句一样，
#也是返回一个值。那么，就能够理解为什么使用生成器比不使用生成器要好，能够理解使用生成器真的可以让代码变得清晰易懂

#注意事项：生成器只能遍历一次（母鸡一生只能下一定数量的蛋，下完了就die了）


